
Assumptions:
  Real-world software contains lots of defects.
  Well-defined is better than not-well-defined or undefined.
  Simpler is better than complex.
    Proving/deriving program correctness is easier given well-defined,
    simple programs.
    Most computer programs contain constructs that are not well-defined
    or simple.

Assert:
  An axiomatic model of correct software constructs can be applied to
  existing programs to ensure the well-definedness of the software, and
  then simplify it, resulting in programs with fewer defects.
        

Axiomatic Software Model
-------------------------


Scope (Language-defined)
  
  "Controlling complexity is the essence of computer programming."
                                          -- Brian Kernighan
  
  Scope is the definition of accessibility from one part of a program
  to another.
  
  The purpose of scope is to reduce software's complexity, where
  complexity is the number of combinations of interactions between
  software objects.
  
  Every scope instance partitions a program into two sets: those that
  can access objects at that scope and those that cannot.
  
  
  Object
  
    An object is a tuple of (Private, Public) members, where Private
    and Public are sets of objects differing in their scope.
  
    +- obj ---+
    | private | members inaccessible outside
    | public <-> accessible outside
    +---------+
    
    The simplest software objects in computing are really bits, but
    let's simplify.
    
    In C they are the built-in scalar types, i.e.
    
      char
      int
      long
    
      These software objects contain a set of bits, public to all.
  
  Scope affects every object. Every object in a program is assigned
  a scope, either implicitly or explicitly. 


Type (Language-defined)
  
  <Scope> <Type>
  
  Language must contain one or more well-defined types.
  
  A well-defined type includes definition of storage and
  results of all operations.


Identifier (Language-defined)
  
  <Scope> <Symbol>
  
  a.k.a Symbol; abstract reference to a lower-level object


Declare Storage
  
  <Scope> <Type> <Identifier>
  
  i.e.
    int i;
    const char *s;
    static struct foo Foo;
  
  storage declaration must...
  
    scope
    
    type
      0. reference know type
    
    identifier
      0. identifier is (namespace) unique


Type ::= <BuiltIn Type> | <Declared Type>


Declare Storage
  
  <Scope> <Type> <Identifier>
  
  i.e.
  
    typedef unsigned int uint;
    struct foo { int i; };
  
  0. reference know type(s)
  

Declare Literal or Constant
  
  [<Type>] <Literal>
  
  0. reference known type
  1. compatible type
    if explicit type
      type and literal must be compatible with one another
  2. if implicit type
      must only one and only one possible interpretation of type

  the declaration of a constant/literal value constitutes
  a value "source" vs, which is the first item in a chain of
  one or more value states throughout the lifetime of that
  value.

  
Value ::= <Storage> | <Literal Or Constant>


Move(Storage dst, Value src)
  
  Overwrite contents of storage dst with value src
  
  dst <- src
  
  0. type compatibility
  1. if src is storage, it must have been previously written to.
  2. dst should not already contain src value
    if it is not possible for dst to contain anything other than
    the value being written to it.
    consider:
    
      a := b
      a := b
    
    note that it is the combination of storage location AND value, not
    just storage that is important. consider:
    
      a := b
      b := a
    
    note that there are many cases where this can happen, such as
      * C's "volatile". 'src' may be memory-mapped i/o or something similar
      * threaded code. research possibilities.
    exceptions
      * debouncing: purpose of copy is to introduce a small delay
        to allow circuit to settle (microcontroller-style)
  3. 
  
  Read(foo)
  
    where foo is src operand in a Move(dst,src) operation
  
  Write(foo)
  
    where foo is dst operand in a Move(dst,src) operation


Branch
  


Call(Fn f, Value[] param, Storage s)
  
  s := f(param)
  
  



Brainstorm way ahead:
  function must have exactly one entry point
  function must have exactly one exit point


Reference:

  1. http://en.wikipedia.org/wiki/Function_(mathematics)
  2. http://en.wikipedia.org/wiki/Domain_(mathematics)
  3. http://en.wikipedia.org/wiki/Codomain
  4. http://en.wikipedia.org/wiki/Category_theory
  5. http://en.wikipedia.org/wiki/Type_theory
  6. http://en.wikipedia.org/wiki/Programming_language_theory
  7. http://en.wikipedia.org/wiki/Type_system

