   __      ____    ____  __  __    ___ ___      __   
 /'__`\   /',__\  /',__\/\ \/\ \ /' __` __`\  /'__`\ 
/\ \_\.\_/\__, `\/\__, `\ \ \_\ \/\ \/\ \/\ \/\  __/ 
\ \__/.\_\/\____/\/\____/\ \____/\ \_\ \_\ \_\ \____\
 \/__/\/_/\/___/  \/___/  \/___/  \/_/\/_/\/_/\/____/
                                                     
"When you ASSUME you make an ASS out of U and ME"

explore code as data.
hopefully write static analysis tool.
want to explore C source via HLL (Ocaml)

git clone git://github.com/pizza/assume.git

In the meantime, here is some reading material:

* http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex-ocamlyacc/ocamllex-tutorial/ocamllex-tutorial.html
  Ocamllex tutorial

* http://c2xml.sourceforge.net/
  This is a straight-forward tool and a really good idea.
  Sadly it's Windows-only.
  XML is more readily manipulable than C source.

* http://splint.org/
  Modern UNIX "lint"; infamous for its copious output.
  Written in C(!)

* http://mtc.epfl.ch/software-tools/blast/
  BLAST a static analyzer from Berkely. Haven't figured out
  what it does yet.

* http://www.kernel.org/pub/software/devel/sparse/
  Tool written by Linus Torvalds to find common bugs in
  Linux kernel drivers. Written in C, of course.

* http://en.wikipedia.org/wiki/Static_code_analysis
  "It has been proven that, barring some hypothesis that the
  state space of programs is finite and small, finding all
  possible run-time errors, or more generally any kind of
  violation of a specification on the final result of a
  program, is undecidable: there is no mechanical method that
  can always answer truthfully whether a given program may or
  may not exhibit runtime errors." -- that's what keeps us
  programmers in business baby!

