   __      ____    ____  __  __    ___ ___      __   
 /'__`\   /',__\  /',__\/\ \/\ \ /' __` __`\  /'__`\ 
/\ \_\.\_/\__, `\/\__, `\ \ \_\ \/\ \/\ \/\ \/\  __/ 
\ \__/.\_\/\____/\/\____/\ \____/\ \_\ \_\ \_\ \____\
 \/__/\/_/\/___/  \/___/  \/___/  \/_/\/_/\/_/\/____/
                                                     

"Testing shows the presence, not the absence, of bugs."
  -- Edsger W. Dijkstra

Apply axiomatic software model to source tree.
Detect bogus/questionable constructs.
If lint is a blacklist, this is a whitelist.

git clone git://github.com/pizza/assume.git

In the meantime, here is some reading material:

* http://en.wikipedia.org/wiki/Static_code_analysis

  "It has been proven that, barring some hypothesis that the
  state space of programs is finite and small, finding all
  possible run-time errors, or more generally any kind of
  violation of a specification on the final result of a
  program, is undecidable: there is no mechanical method that
  can always answer truthfully whether a given program may or
  may not exhibit runtime errors."
  
  Absolutely true; it is impossible to know whether or not
  a program will i.e. crash given a certain combination of
  input.
  
  However, it is possible to know if it *can* crash by
  enumerating all crashing conditions and assuring that they
  are avoided.


